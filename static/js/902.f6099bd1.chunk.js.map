{"version":3,"file":"static/js/902.f6099bd1.chunk.js","mappings":"yTAEaA,EAAgBC,EAAAA,GAAAA,IAAH,4IAQbC,EAAgBD,EAAAA,GAAAA,GAAH,mHAET,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAKTC,EAAOL,EAAAA,GAAAA,KAAH,yIAQJM,EAAaN,EAAAA,GAAAA,MAAH,wMAKN,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAKTG,EAAaP,EAAAA,GAAAA,MAAH,4LAEN,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAGD,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAKbI,EAAeR,EAAAA,GAAAA,OAAH,gtBAKJ,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAGT,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAID,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,I,SCxCpBK,EAAe,CACjBC,KAAM,GACNC,MAAO,GACPC,SAAU,IA4Fd,EAzFiB,WACb,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAASJ,GAArC,eAAOO,EAAP,KAAeC,EAAf,KAGMC,EAAoB,SAACC,GACvB,MAAwBA,EAAMC,cAAtBV,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MAEdJ,GAAU,SAAAK,GAAI,yBAASA,GAAT,cAAgBZ,EAAOW,GAAvB,GACjB,EAEKE,EAAY,mCAAG,WAAOJ,GAAP,wEACjBA,EAAMK,iBAENC,QAAQC,IAAIV,GAHK,SAMbD,GAAa,GANA,SAOPY,EAAAA,EAAAA,KAAW,qDAAsDX,GAP1D,OAQbD,GAAa,GACba,EAAAA,GAAAA,QAAc,8DATD,kDAWbH,QAAQC,IAAR,MACAE,EAAAA,GAAAA,MAAY,+BAZC,QAejBX,EAAUR,GAfO,0DAAH,sDAkBlB,OACI,UAACV,EAAD,WACKe,IAAa,SAACe,EAAA,EAAD,KAEd,SAAC5B,EAAD,6CAEA,UAACI,EAAD,CAAMyB,SAAUP,EAAhB,WACI,UAACjB,EAAD,mBAEI,SAACC,EAAD,CACIwB,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,aAAa,MACbC,YAAY,OACZf,MAAOL,EAAON,KACd2B,SAAUnB,QAIlB,UAACZ,EAAD,oBAEI,SAACC,EAAD,CACIwB,KAAK,QACLrB,KAAK,QAGLwB,UAAQ,EACRC,aAAa,MACbC,YAAY,iBACZf,MAAOL,EAAOL,MACd0B,SAAUnB,QAIlB,UAACZ,EAAD,uBAEI,SAACC,EAAD,CAEIwB,KAAK,WACLrB,KAAK,WAGLwB,UAAQ,EACRC,aAAa,MACbC,YAAY,aACZf,MAAOL,EAAOJ,SACdyB,SAAUnB,QAKlB,SAACV,EAAD,CAAcuB,KAAK,SAAnB,0BAIf,C","sources":["pages/Register/Register.styled.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RegisterGroup = styled.div`\n    margin: 0;\n    padding: 16px 40px;\n    text-align: center;\n    background: lavender;\n    color: chocolate;\n`;\n\nexport const RegisterTitle = styled.h2`\n    margin: 0 0 8px 0;\n    font-size: ${props => props.theme.spacing(3)};\n    font-weight: 500;\n    line-height: 1.5;\n`;\n\nexport const Form = styled.form`\n    width: 400px;\n    margin-right: auto;\n    margin-left: auto;\n    margin-bottom: 16px;\n    padding: 8px;\n`;\n\nexport const LabelField = styled.label`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 16px;\n    font-size: ${props => props.theme.spacing(2)};\n    font-weight: 500;\n    line-height: 1.2;\n`;\n\nexport const InputField = styled.input`\n    padding: 16px;\n    font-size: ${props => props.theme.spacing(2)};\n    line-height: 1.2;\n    border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)};\n    width: 284px;\n    cursor: pointer;\n`;\n\nexport const ButtonAdding = styled.button`\n/* toggle password */\n    /* display: block;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: ${props => props.theme.spacing(2)}; */\n/* toggle password */\n    padding: 8px 24px;\n    font-size: ${props => props.theme.spacing(2)};\n    font-weight: 700;\n    line-height: 1.2;\n    border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)};\n    cursor: pointer;\n    background: burlywood;\n    color: honeydew;\n    transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out, border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n        background: chocolate;\n        color: springgreen;\n        border: 1px solid springgreen;\n        transform: scale(1.1);\n    }\n`;","import axios from \"axios\";\nimport { useState } from \"react\";\nimport { toast } from \"react-toastify\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { nanoid } from \"nanoid\";\n// import { selectContacts } from \"redux/selectors\";\n// import * as contactsOperations from \"redux/contacts/contactsOperations\";\nimport Loader from \"components/Loader/Loader\";\nimport {\n    RegisterGroup,\n    RegisterTitle,\n    Form,\n    LabelField,\n    InputField,\n    ButtonAdding,\n} from \"./Register.styled\";\n\nconst initialState = {\n    name: '',\n    email: '',\n    password: '',\n}\n\nconst Register = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [values, setValues] = useState(initialState);\n    // const [isPassword, setIsPassword] = useState(true);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.currentTarget;\n\n        setValues(prev => ({...prev, [name]: value}))\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        console.log(values);\n\n        try {\n            setIsLoading(true);\n            await axios.post('https://connections-api.herokuapp.com/users/signup', values);\n            setIsLoading(false);\n            toast.success('Congratulate! You have just become the owner of Phonebook!');\n        } catch (error) {\n            console.log(error);\n            toast.error('Houston! We have a problem!');\n        }\n\n        setValues(initialState);\n    }\n\n    return (\n        <RegisterGroup>\n            {isLoading && <Loader />}\n\n            <RegisterTitle>Please Sign In Your Phonebook</RegisterTitle>\n\n            <Form onSubmit={handleSubmit}>\n                <LabelField>\n                    Name\n                    <InputField\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        autoComplete=\"off\"\n                        placeholder=\"Name\"\n                        value={values.name}\n                        onChange={handleInputChange}\n                    />\n                </LabelField>\n\n                <LabelField>\n                    Email\n                    <InputField\n                        type=\"email\"\n                        name=\"email\"\n                        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        autoComplete=\"off\"\n                        placeholder=\"name@email.com\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                    />\n                </LabelField>\n\n                <LabelField>\n                    Password\n                    <InputField\n                        // type={isPassword ? \"password\" : \"text\"}\n                        type=\"password\"\n                        name=\"password\"\n                        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        autoComplete=\"off\"\n                        placeholder=\"Name123456\"\n                        value={values.password}\n                        onChange={handleInputChange}\n                    />\n                </LabelField>\n\n                {/* <ButtonAdding type=\"button\" onClick={() => setIsPassword(prev => !prev)}>Show Password</ButtonAdding> */}\n                <ButtonAdding type=\"submit\">Sign In</ButtonAdding>\n            </Form>\n        </RegisterGroup>\n    )\n}\n\nexport default Register;"],"names":["RegisterGroup","styled","RegisterTitle","props","theme","spacing","Form","LabelField","InputField","ButtonAdding","initialState","name","email","password","useState","isLoading","setIsLoading","values","setValues","handleInputChange","event","currentTarget","value","prev","handleSubmit","preventDefault","console","log","axios","toast","Loader","onSubmit","type","pattern","title","required","autoComplete","placeholder","onChange"],"sourceRoot":""}